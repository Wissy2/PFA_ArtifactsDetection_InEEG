{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12821347,"sourceType":"datasetVersion","datasetId":8107377}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install mne pyedflib pandas matplotlib seaborn","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-20T23:57:25.231740Z","iopub.execute_input":"2025-08-20T23:57:25.232004Z","iopub.status.idle":"2025-08-20T23:57:30.710437Z","shell.execute_reply.started":"2025-08-20T23:57:25.231986Z","shell.execute_reply":"2025-08-20T23:57:30.709510Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: mne in /usr/local/lib/python3.11/dist-packages (1.9.0)\nCollecting pyedflib\n  Downloading pyedflib-0.1.42-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.2 kB)\nRequirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.3)\nRequirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.7.2)\nRequirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.12.2)\nRequirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from mne) (4.4.2)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from mne) (3.1.6)\nRequirement already satisfied: lazy-loader>=0.3 in /usr/local/lib/python3.11/dist-packages (from mne) (0.4)\nRequirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from mne) (1.26.4)\nRequirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from mne) (25.0)\nRequirement already satisfied: pooch>=1.5 in /usr/local/lib/python3.11/dist-packages (from mne) (1.8.2)\nRequirement already satisfied: scipy>=1.9 in /usr/local/lib/python3.11/dist-packages (from mne) (1.15.3)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from mne) (4.67.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.4)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\nRequirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.23->mne) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.23->mne) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.23->mne) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.23->mne) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.23->mne) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.23->mne) (2.4.1)\nRequirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from pooch>=1.5->mne) (4.3.8)\nRequirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.11/dist-packages (from pooch>=1.5->mne) (2.32.4)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->mne) (3.0.2)\nRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pooch>=1.5->mne) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pooch>=1.5->mne) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pooch>=1.5->mne) (2.5.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pooch>=1.5->mne) (2025.6.15)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<3,>=1.23->mne) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<3,>=1.23->mne) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy<3,>=1.23->mne) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy<3,>=1.23->mne) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy<3,>=1.23->mne) (2024.2.0)\nDownloading pyedflib-0.1.42-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.9/2.9 MB\u001b[0m \u001b[31m16.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: pyedflib\nSuccessfully installed pyedflib-0.1.42\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import mne, pandas as pd, os\n\nedf_path = \"/kaggle/input/tuh-eeg-artifacts/aaaaaaju_s005_t000.edf\"\ncsv_path = \"/kaggle/input/tuh-eeg-artifacts/aaaaaaju_s005_t000.csv\"\nmontage_path = \"/kaggle/input/tuh-eeg-artifacts/01_tcp_ar_montage.txt\" \n\nraw = mne.io.read_raw_edf(edf_path, preload=True, verbose=False)\n\n# CSV: skip comment header lines starting with '#'\nann = pd.read_csv(csv_path, comment=\"#\")\n\n# Read channel names from the montage file (one name per line; ignore blanks/comments)\nmontage_chans = []\nwith open(montage_path, \"r\") as f:\n    for line in f:\n        line = line.strip()\n        if not line or line.startswith(\"#\"):\n            continue\n        montage_chans.append(line)\n\nprint(\"EDF channels (first 10):\", raw.ch_names[:10])\nprint(\"CSV channels (sample):\", ann[\"channel\"].head().tolist())\nprint(\"Montage channels (first 10):\", montage_chans[:10])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T00:11:09.529751Z","iopub.execute_input":"2025-08-21T00:11:09.530029Z","iopub.status.idle":"2025-08-21T00:11:09.869831Z","shell.execute_reply.started":"2025-08-21T00:11:09.530009Z","shell.execute_reply":"2025-08-21T00:11:09.868892Z"}},"outputs":[{"name":"stdout","text":"EDF channels (first 10): ['EEG FP1-REF', 'EEG FP2-REF', 'EEG F3-REF', 'EEG F4-REF', 'EEG C3-REF', 'EEG C4-REF', 'EEG P3-REF', 'EEG P4-REF', 'EEG O1-REF', 'EEG O2-REF']\nCSV channels (sample): ['FP1-F7', 'FP1-F7', 'FP1-F7', 'F7-T3', 'F7-T3']\nMontage channels (first 10): ['[Montage]', 'montage = 0, FP1-F7: EEG FP1-REF -- EEG F7-REF', 'montage = 1, F7-T3: EEG F7-REF -- EEG T3-REF', 'montage = 2, T3-T5: EEG T3-REF -- EEG T5-REF', 'montage = 3, T5-O1: EEG T5-REF -- EEG O1-REF', 'montage = 4, FP2-F8: EEG FP2-REF -- EEG F8-REF', 'montage = 5, F8-T4: EEG F8-REF -- EEG T4-REF', 'montage = 6, T4-T6: EEG T4-REF -- EEG T6-REF', 'montage = 7, T6-O2: EEG T6-REF -- EEG O2-REF', 'montage = 8, A1-T3: EEG A1-REF -- EEG T3-REF']\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"Build a dictionnary \n\"FP1-F7\" -> (\"EEG FP1-REF\", \"EEG F7-REF\")","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# Example EDF data (replace with your actual EDF-loaded DataFrame or array)\nedf_channels = ['EEG FP1-REF', 'EEG FP2-REF', 'EEG F3-REF', 'EEG F4-REF', 'EEG C3-REF', 'EEG C4-REF',\n                'EEG P3-REF', 'EEG P4-REF', 'EEG O1-REF', 'EEG O2-REF']\nedf_data = pd.DataFrame(np.random.randn(1000, len(edf_channels)), columns=edf_channels)  # fake signals\n\n# Example montage lines\nmontage_lines = [\n    \"montage = 0, FP1-F7: EEG FP1-REF -- EEG F7-REF\",\n    \"montage = 1, F7-T3: EEG F7-REF -- EEG T3-REF\",\n    \"montage = 2, T3-T5: EEG T3-REF -- EEG T5-REF\",\n    \"montage = 3, T5-O1: EEG T5-REF -- EEG O1-REF\"\n]\n\n# Step 1: Build montage dictionary\nmontage_dict = {}\nfor line in montage_lines:\n    if \":\" in line:\n        csv_name, edf_pair = line.split(\":\")\n        csv_name = csv_name.split(\",\")[1].strip()  # e.g. FP1-F7\n        left, right = edf_pair.strip().split(\" -- \")\n        montage_dict[csv_name] = (left.strip(), right.strip())\n\nprint(\"Montage dictionary:\", montage_dict)\n\n# Step 2: Create new dataframe with bipolar signals\ncsv_channels = [\"FP1-F7\", \"F7-T3\"]  # Example from your CSV\nbipolar_data = pd.DataFrame()\n\nfor ch in csv_channels:\n    if ch in montage_dict:\n        left, right = montage_dict[ch]\n        if left in edf_data.columns and right in edf_data.columns:\n            bipolar_data[ch] = edf_data[left] - edf_data[right]\n        else:\n            print(f\"Warning: {ch} not found in EDF data\")\n\nprint(bipolar_data.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T00:27:42.161824Z","iopub.execute_input":"2025-08-21T00:27:42.162454Z","iopub.status.idle":"2025-08-21T00:27:42.178074Z","shell.execute_reply.started":"2025-08-21T00:27:42.162434Z","shell.execute_reply":"2025-08-21T00:27:42.177134Z"}},"outputs":[{"name":"stdout","text":"Montage dictionary: {'FP1-F7': ('EEG FP1-REF', 'EEG F7-REF'), 'F7-T3': ('EEG F7-REF', 'EEG T3-REF'), 'T3-T5': ('EEG T3-REF', 'EEG T5-REF'), 'T5-O1': ('EEG T5-REF', 'EEG O1-REF')}\nWarning: FP1-F7 not found in EDF data\nWarning: F7-T3 not found in EDF data\nEmpty DataFrame\nColumns: []\nIndex: []\n","output_type":"stream"}],"execution_count":13}]}